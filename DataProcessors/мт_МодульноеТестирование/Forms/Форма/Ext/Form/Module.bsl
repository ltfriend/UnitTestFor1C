///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020 - 2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли; 
	
	Автозапуск = Параметры.Автозапуск;
	
	ЗаполнитьТипыОбъектовМетаданных();
	
	ПоказыватьПройденныеТесты = Истина;
	ПоказыватьНепройденныеТесты = Истина;
	ПоказыватьНевыполненныеТесты = Истина;
	
	Элементы.ПоказыватьПройденныеТесты.Пометка = ПоказыватьПройденныеТесты;
	Элементы.ПоказыватьНепройденныеТесты.Пометка = ПоказыватьНепройденныеТесты;
	Элементы.ПоказыватьНевыполненныеТесты.Пометка = ПоказыватьНевыполненныеТесты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиТестирования = глНастройкиТестирования;
	ПодключитьОбработчикОжидания("ИнициализироватьФорму", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоТестовПриАктивизацииСтроки(Элемент)
	
	СформироватьОписаниеРезультата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьОтборТестовПоСтатусу(Команда)
	
	ИмяОтбора = Команда.Имя;
	
	ЭтаФорма[ИмяОтбора] = Не ЭтаФорма[ИмяОтбора];
	Элементы[ИмяОтбора].Пометка = ЭтаФорма[ИмяОтбора];
	
	ПостроитьДеревоТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНастроекЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.мт_МодульноеТестирование.Форма.Настройки", , ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеНастроекЗавершение(Результат, ДопПараметры) Экспорт
	
	// Обновим локальные настройки для доступности их на сервере.
	НастройкиТестирования = глНастройкиТестирования;
	
КонецПроцедуры 

&НаКлиенте
Процедура СвернутьРазвернутьГруппыТестов(Команда)
	
	Если Команда = Команды.РазвернутьВсеГруппыТестов Тогда
		Действие = "Развернуть";
	ИначеЕсли Команда = Команды.СвернутьВсеГруппыТестов Тогда
		Действие = "Свернуть";
	КонецЕсли; 
	
	Для каждого СтрокаДерева Из ДеревоТестов.ПолучитьЭлементы() Цикл
		
		Если Действие = "Свернуть" Тогда
			Элементы.ДеревоТестов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		ИначеЕсли Действие = "Развернуть" Тогда
			Элементы.ДеревоТестов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьТесты(Команда)
	
	ТипТеста = Команда.Имя;
	НачатьВыполнениеТестов(ТипТеста);
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТипыОбъектовМетаданных()
	
	ДобавитьТипОбъектовМетаданныхВТаблицу("ОбщийМодуль", НСтр("ru='Общие модули'"), 0);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ПланОбмена", НСтр("ru='Планы обмена'"), 1);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ОбщаяФорма", НСтр("ru='Общие формы'"), 2);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Константа", НСтр("ru='Константы'"), 3);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Справочник", НСтр("ru='Справочники'"), 4);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Документ", НСтр("ru='Документы'"), 5);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ЖурналДокументов", НСтр("ru='Журналы документов'"), 6);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Перечисление", НСтр("ru='Перечисления'"), 7);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Отчет", НСтр("ru='Отчеты'"), 8);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Обработка", НСтр("ru='Обработки'"), 9);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ПланВидовХарактеристик", НСтр("ru='Планы видов характеристик'"), 10);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ПланСчетов", НСтр("ru='Планы счетов'"), 11);
	ДобавитьТипОбъектовМетаданныхВТаблицу("ПланВидовРасчета", НСтр("ru='Планы видов расчета'"), 12);
	ДобавитьТипОбъектовМетаданныхВТаблицу("РегистрСведений", НСтр("ru='Регистры сведений'"), 13);
	ДобавитьТипОбъектовМетаданныхВТаблицу("РегистрНакопления", НСтр("ru='Регистры накопления'"), 14);
	ДобавитьТипОбъектовМетаданныхВТаблицу("РегистрБухгалтерии", НСтр("ru='Регистры бухгалтерии'"), 15);
	ДобавитьТипОбъектовМетаданныхВТаблицу("РегистрРасчета", НСтр("ru='РегистрыРасчета'"), 16);
	ДобавитьТипОбъектовМетаданныхВТаблицу("БизнесПроцесс", НСтр("ru='Бизнес-процессы'"), 17);
	ДобавитьТипОбъектовМетаданныхВТаблицу("Задача", НСтр("ru='Задачи'"), 18);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьТипОбъектовМетаданныхВТаблицу(ТипОбъектов, Представление, ИндексКартинки)
	
	СтрокаТаблицы = ТипыОбъектовМетаданных.Добавить();
	СтрокаТаблицы.ТипОбъектов = ТипОбъектов;
	СтрокаТаблицы.Представление = Представление;
	СтрокаТаблицы.ИндексКартинки = ИндексКартинки;
	СтрокаТаблицы.Порядок = ТипыОбъектовМетаданных.Количество();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьФорму()
	
	ОчиститьСообщения();
	ТаблицаТестов.Очистить();
	
	Состояние(НСтр("ru='Заполнение списка тестов...'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаПредыдущихРезультатовТестовЗавершение", ЭтотОбъект);
	НачатьЗагрузкуПредыдущихРезультатовТестов(Оповещение);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузкаПредыдущихРезультатовТестовЗавершение(ПредыдущиеРезультаты, ДопПараметры) Экспорт
	Перем ОбъектыМетаданныхСТестами;
	
	ИнициализироватьФормуНаСервере(ОбъектыМетаданныхСТестами);
	ДобавитьКлиентскиеТестыВТаблицу(ОбъектыМетаданныхСТестами);
	
	Если ПредыдущиеРезультаты <> Неопределено Тогда
		ЗаполнитьПредыдущиеРезультатыТестов(ПредыдущиеРезультаты);
	КонецЕсли; 
	
	ПостроитьДеревоТестов();
	
	Если Автозапуск Тогда
		
		НачатьВыполнениеТестов("ВыполнитьВсеТесты");
		
		Если глНастройкиТестирования.ЗавершатьРаботуПослеАвтозапуска Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры 

// Инициализирует форму на сервере.
//
// Параметры
//   ОбъектыМетаданныхСТестами - Массив - выходной параметр содержит список объектов метаданных,
//                                        которые содержат тесты.
//
&НаСервере
Процедура ИнициализироватьФормуНаСервере(ОбъектыМетаданныхСТестами)
	
	ОбъектыМетаданныхСТестами = ПолучитьОбъектыМетаданныхСТестами();
	ДобавитьСерверныеТестыВТаблицу(ОбъектыМетаданныхСТестами);
	
КонецПроцедуры 

#Область ПостроениеДереваТестов

&НаСервере
Процедура ПостроитьДеревоТестов()
	
	СтрокиТиповОбъектов = ДеревоТестов.ПолучитьЭлементы();
	СтрокиТиповОбъектов.Очистить();
	
	НетТестовПоОтбору = Не (ПоказыватьНевыполненныеТесты
								Или ПоказыватьНепройденныеТесты
								Или ПоказыватьПройденныеТесты);
	Если НетТестовПоОтбору Тогда
		Возврат;
	КонецЕсли; 
	
	ВсегоТестов = 0;
	ОбщаяДлительность = 0;
	
	Запрос = ЗапросПостроенияДереваТестов();
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТипыОбъектов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипыОбъектов.Следующий() Цикл
		
		ВсегоТестов = ВсегоТестов + ВыборкаТипыОбъектов.КоличествоТестов;
		ОбщаяДлительность = ОбщаяДлительность + ВыборкаТипыОбъектов.Длительность;
		
		ОписаниеТипаОбъекта = ОписаниеТипаОбъектаМетаданных(
			ВыборкаТипыОбъектов.ТипОбъекта, ТипыОбъектовМетаданных);
		
		СтрокаТипаОбъектов = ДобавитьСтрокуВДеревоТестов(
			СтрокиТиповОбъектов,
			ВыборкаТипыОбъектов,
			ОписаниеТипаОбъекта.Представление,
			ОписаниеТипаОбъекта.ИндексКартинки,
			Истина);
		
		ЗаполнитьОбъектыВДеревеТестов(
			СтрокаТипаОбъектов.ПолучитьЭлементы(),
			ВыборкаТипыОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
			ОписаниеТипаОбъекта.ИндексКартинки);
		
	КонецЦикла;
	
	Элементы.ДеревоТестовПредставлениеГруппировки.ТекстПодвала = НСтр("ru='Всего тестов:'") + " " + ВсегоТестов;
	Элементы.ДеревоТестовПредставлениеДлительности.ТекстПодвала = ПредставлениеДлительности(ОбщаяДлительность);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьОбъектыВДеревеТестов(СтрокиОбъектов, ВыборкаОбъекты, КартинкаОбъекта)
	
	Пока ВыборкаОбъекты.Следующий() Цикл
		
		СтрокаОбъекта = ДобавитьСтрокуВДеревоТестов(
			СтрокиОбъектов,
			ВыборкаОбъекты,
			ВыборкаОбъекты.Объект,
			КартинкаОбъекта,
			Истина);
		
		ЗаполнитьМодулиВДеревеТестов(
			СтрокаОбъекта.ПолучитьЭлементы(),
			ВыборкаОбъекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМодулиВДеревеТестов(СтрокиМодулей, ВыборкаМодули)
	
	Пока ВыборкаМодули.Следующий() Цикл
		
		ЕстьГруппировкаПоМодулям = Не ВыборкаМодули.ТипОбъекта = "ОбщаяФорма"
										И Не ВыборкаМодули.ТипОбъекта = "ОбщийМодуль";
		Если ЕстьГруппировкаПоМодулям Тогда
			СтрокаМодуля = ДобавитьСтрокуВДеревоТестов(
				СтрокиМодулей,
				ВыборкаМодули,
				ВыборкаМодули.ТипМодуля,
				ВыборкаМодули.КартинкаРезультата,
				Истина);
			СтрокиРодительскихТестов = СтрокаМодуля.ПолучитьЭлементы();
		Иначе
			СтрокиРодительскихТестов = СтрокиМодулей;
		КонецЕсли; 
		
		ВыборкаТестыБезУточнения = ВыборкаМодули.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЗаполнитьТестыБезУточненияВДереве(СтрокиРодительскихТестов, ВыборкаТестыБезУточнения);
		
	КонецЦикла;
			
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТестыБезУточненияВДереве(СтрокиДерева, ВыборкаТестыБезУточнения)
		
	ИндексКартинкиТеста = 19;
		
	Пока ВыборкаТестыБезУточнения.Следующий() Цикл
		
		ЕстьТестыСУточнениями = (ВыборкаТестыБезУточнения.КоличествоТестов > 1);
		Если ЕстьТестыСУточнениями Тогда
			СтрокаТестаБезУточнения = ДобавитьСтрокуВДеревоТестов(
				СтрокиДерева,
				ВыборкаТестыБезУточнения,
				СформироватьПредставлениеТеста(ВыборкаТестыБезУточнения.ИмяТеста),
				ИндексКартинкиТеста,
				Истина);
			СтрокиТестов = СтрокаТестаБезУточнения.ПолучитьЭлементы();
		Иначе
			СтрокиТестов = СтрокиДерева;
		КонецЕсли; 
		
		ВыборкаТесты = ВыборкаТестыБезУточнения.Выбрать();
		ЗаполнитьТестыВДереве(СтрокиТестов, ВыборкаТесты, ЕстьТестыСУточнениями);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТестыВДереве(СтрокиТестов, ВыборкаТесты, ЕстьТестыСУточнениями)
	
	ИндексКартинкиТеста = 19;
	
	Пока ВыборкаТесты.Следующий() Цикл
		
		Если ЕстьТестыСУточнениями И ЗначениеЗаполнено(ВыборкаТесты.Уточнение) Тогда
			ПредставлениеТеста = ВыборкаТесты.Уточнение;
		Иначе
			ПредставлениеТеста = СформироватьПредставлениеТеста(ВыборкаТесты.ИмяТеста);
			Если ЗначениеЗаполнено(ВыборкаТесты.Уточнение) Тогда
				ПредставлениеТеста = ПредставлениеТеста + "(" + ВыборкаТесты.Уточнение + ")";
			КонецЕсли; 
		КонецЕсли;
		
		ДобавитьСтрокуВДеревоТестов(
			СтрокиТестов,
			ВыборкаТесты,
			ПредставлениеТеста,
			ИндексКартинкиТеста,
			Ложь);
		
	КонецЦикла;
		
КонецПроцедуры 

&НаСервере
Функция ДобавитьСтрокуВДеревоТестов(СтрокиДерева, Выборка, Представление, КартинкаОбъекта, ЭтоГруппа)
	
	СтрокаТеста = СтрокиДерева.Добавить();
	СтрокаТеста.ТипОбъекта = Выборка.ТипОбъекта;
	СтрокаТеста.Объект = Выборка.Объект;
	СтрокаТеста.ТипМодуля = Выборка.ТипМодуля;
	СтрокаТеста.ИмяТеста = Выборка.ИмяТеста;
	СтрокаТеста.Уточнение = Выборка.Уточнение;
	СтрокаТеста.Длительность = Выборка.Длительность;
	СтрокаТеста.ТестПройден = Выборка.ТестПройден;
	СтрокаТеста.СообщениеОбОшибке = Выборка.СообщениеОбОшибке;
	СтрокаТеста.ПредставлениеГруппировки = Представление;
	СтрокаТеста.КартинкаРезультата = Выборка.КартинкаРезультата;
	СтрокаТеста.ДатаВыполнения = Выборка.ДатаВыполнения;
	СтрокаТеста.ПредставлениеДлительности =
		?(ЗначениеЗаполнено(СтрокаТеста.ДатаВыполнения) И СтрокаТеста.Длительность = 0,
			НСтр("ru='< 1 мс'"),
			ПредставлениеДлительности(Выборка.Длительность));
	СтрокаТеста.КартинкаОбъекта = КартинкаОбъекта;
	СтрокаТеста.АдресПараметровТеста = Выборка.АдресПараметровТеста;
	СтрокаТеста.ПодробнаяИнформацияОбОшибке = Выборка.ПодробнаяИнформацияОбОшибке;
	СтрокаТеста.Идентификатор = Выборка.Идентификатор;
	СтрокаТеста.ЭтоГруппа = ЭтоГруппа;
	
	Если ЭтоГруппа Тогда
		СтрокаТеста.ПредставлениеГруппировки = СтрокаТеста.ПредставлениеГруппировки +
			" (" + Выборка.КоличествоТестов + ")";
	КонецЕсли; 
	
	Возврат СтрокаТеста;
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеТеста(ИмяТеста)
	
	ПредставлениеТеста = ИмяТеста;
	
	Если НастройкиТестирования.УдалятьПрефиксВНазванияхТестов
			И СтрНачинаетсяС(НРег(ИмяТеста), НРег(НастройкиТестирования.ПрефиксНазванийТестов))
	Тогда
		ПредставлениеТеста = Сред(ПредставлениеТеста, СтрДлина(НастройкиТестирования.ПрефиксНазванийТестов) + 1);
	КонецЕсли; 
	
	Если НастройкиТестирования.ПробелыВместоПодчеркиванияВНазванияхТестов Тогда
		ПредставлениеТеста = СтрЗаменить(ПредставлениеТеста, "_", " ");
	КонецЕсли; 
	
	Возврат ПредставлениеТеста;
	
КонецФункции 

&НаСервере
Функция ЗапросПостроенияДереваТестов()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		ТаблицаТестовСПорядкомПоТипуОбъекта(),
		"ТаблицаТестов");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПредыдущегоЗапуска", ДатаПредыдущегоЗапуска);
	Запрос.Текст = ТекстЗапросаПостроенияДереваТестов();
	
	Возврат Запрос;
	
КонецФункции 

&НаСервере
Функция ТекстЗапросаПостроенияДереваТестов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТестов.ТипОбъекта КАК ТипОбъекта,
	|	ТаблицаТестов.ПорядокТипаОбъекта КАК ПорядокТипаОбъекта,
	|	ТаблицаТестов.Объект КАК Объект,
	|	ТаблицаТестов.ТипМодуля КАК ТипМодуля,
	|	ВЫБОР
	|		КОГДА ТаблицаТестов.ТипМодуля = ""МодульОбъекта""
	|				ИЛИ ТаблицаТестов.ТипМодуля = ""МодульМенеджераЗначения""
	|				ИЛИ ТаблицаТестов.ТипМодуля = ""МодульНабораЗаписей""
	|			ТОГДА 0
	|		КОГДА ТаблицаТестов.ТипМодуля = ""МодульМенеджера""
	|			ТОГДА 1
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ПорядокТипаМодуля,
	|	ТаблицаТестов.ИмяТеста КАК ИмяТеста,
	|	ТаблицаТестов.Уточнение КАК Уточнение,
	|	ТаблицаТестов.ДатаВыполнения КАК ДатаВыполнения,
	|	ТаблицаТестов.Длительность КАК Длительность,
	|	ТаблицаТестов.ТестПройден КАК ТестПройден,
	|	ТаблицаТестов.СообщениеОбОшибке КАК СообщениеОбОшибке,
	|	ВЫБОР
	|		КОГДА ТаблицаТестов.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		КОГДА ТаблицаТестов.ТестПройден
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТестов.ДатаВыполнения < &ДатаПредыдущегоЗапуска
	|						ТОГДА 5
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТестов.ДатаВыполнения < &ДатаПредыдущегоЗапуска
	|					ТОГДА 6
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК КартинкаРезультата,
	|	ТаблицаТестов.АдресПараметровТеста КАК АдресПараметровТеста,
	|	1 КАК КоличествоТестов,
	|	ТаблицаТестов.ПодробнаяИнформацияОбОшибке КАК ПодробнаяИнформацияОбОшибке,
	|	ТаблицаТестов.Идентификатор КАК Идентификатор
	|ИЗ
	|	ТаблицаТестов КАК ТаблицаТестов
	|ГДЕ
	|	&ТекстУсловиеЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокТипаОбъекта,
	|	Объект,
	|	ПорядокТипаМодуля,
	|	ИмяТеста,
	|	Уточнение
	|ИТОГИ
	|	СУММА(Длительность),
	|	МИНИМУМ(ТестПройден),
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ТаблицаТестов.ДатаВыполнения) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		КОГДА МИНИМУМ(ТаблицаТестов.ТестПройден)
	|			ТОГДА ВЫБОР
	|					КОГДА МИНИМУМ(ТаблицаТестов.ДатаВыполнения) < &ДатаПредыдущегоЗапуска
	|						ТОГДА 5
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МИНИМУМ(ТаблицаТестов.ДатаВыполнения) < &ДатаПредыдущегоЗапуска
	|					ТОГДА 6
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК КартинкаРезультата,
	|	СУММА(КоличествоТестов)
	|ПО
	|	ТипОбъекта,
	|	Объект,
	|	ТипМодуля,
	|	ИмяТеста";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловиеЗапроса", ТекстУсловиеЗапросаДереваТестов());
	
	Возврат ТекстЗапроса;
	
КонецФункции 

&НаСервере
Функция ТекстУсловиеЗапросаДереваТестов()
	Перем ТекстУсловиеЗапроса;
	
	Если ПоказыватьПройденныеТесты Тогда
		ТекстУсловиеЗапроса = "ТаблицаТестов.ТестПройден";
	КонецЕсли; 
	Если ПоказыватьНевыполненныеТесты Тогда
		ТекстУсловиеЗапроса = ?(ТекстУсловиеЗапроса <> Неопределено, ТекстУсловиеЗапроса + " ИЛИ ", "") +
			"ТаблицаТестов.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли; 
	Если ПоказыватьНепройденныеТесты Тогда
		ТекстУсловиеЗапроса = ?(ТекстУсловиеЗапроса <> Неопределено, ТекстУсловиеЗапроса + " ИЛИ ", "") +
			"(ТаблицаТестов.ДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1) И НЕ ТаблицаТестов.ТестПройден)";
	КонецЕсли; 
	
	Возврат ТекстУсловиеЗапроса;
	
КонецФункции 

&НаСервере
Функция ТаблицаТестовСПорядкомПоТипуОбъекта()
	
	ТаблицаТестовСУпорядочиванием = ТаблицаТестов.Выгрузить();
	ТаблицаТестовСУпорядочиванием.Колонки.Добавить("ПорядокТипаОбъекта",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	
	Для каждого СтрокаТеста Из ТаблицаТестовСУпорядочиванием Цикл
		СтрокаТеста.ПорядокТипаОбъекта = ОписаниеТипаОбъектаМетаданных(
			СтрокаТеста.ТипОбъекта, ТипыОбъектовМетаданных);
	КонецЦикла;
	
	Возврат ТаблицаТестовСУпорядочиванием;
	
КонецФункции 

#КонецОбласти 

&НаСервере
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
			МенеджерВременныхТаблиц,
			ТаблицаЗначений,
			ИмяВременнойТаблицы = "Таблица")
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	";
	
	ПерваяКолонка = Истина;
	
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Если ПерваяКолонка Тогда
			ПерваяКолонка = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса +
				",
				|	";
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + "Таблица." + Колонка.Имя + " КАК " + Колонка.Имя;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", ТаблицаЗначений);
	
	Запрос.Выполнить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПредыдущиеРезультатыТестов(ПредыдущиеРезультаты)
	
	ДатаПредыдущегоЗапуска = ПредыдущиеРезультаты.ДатаПредыдущегоЗапуска;
	
	СтруктураПоиска = Новый Структура("ПолноеИмяТеста");
	
	Для каждого РезультатТеста Из ПредыдущиеРезультаты.Результаты Цикл
		
		СтруктураПоиска.ПолноеИмяТеста = РезультатТеста.Тест;
		
		НайденныеСтроки = ТаблицаТестов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТеста = НайденныеСтроки[0];
		СтрокаТеста.ДатаВыполнения = РезультатТеста.ДатаВыполнения;
		СтрокаТеста.Длительность = РезультатТеста.Длительность;
		СтрокаТеста.ТестПройден = РезультатТеста.ТестПройден;
		СтрокаТеста.СообщениеОбОшибке = РезультатТеста.СообщениеОбОшибке;
		СтрокаТеста.ПодробнаяИнформацияОбОшибке = РезультатТеста.ПодробнаяИнформацияОбОшибке;
		
	КонецЦикла;
	
КонецПроцедуры 

#Область ЗаполнениеТаблицыТестов

&НаСервере
Функция ПолучитьОбъектыМетаданныхСТестами()
	
	СписокМетаданных = Новый Массив;
	
	СоставПодсистемы = Метаданные.Подсистемы.мт_ТестируемыеОбъекты.Состав;
	
	Для каждого ОбъектМетаданных Из СоставПодсистемы Цикл
		
		Попытка
			ТипОбъекта = мт_ТестированиеСлужебныйПовтИсп.ПолучитьТипОбъектаМетаданных(ОбъектМетаданных);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='Тесты для объекта метаданных %1 не добавлены:'"),
										ОбъектМетаданных.ПолноеИмя()) + Символы.ПС +
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Сообщить(ТекстСообщения);
			
			Продолжить;
		КонецПопытки;
		
		ГруппаОбъектов = ГруппаОбъектовМетаданных(ТипОбъекта);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("ГруппаОбъектов", ГруппаОбъектов);
		ОписаниеОбъекта.Вставить("ТипОбъекта", ТипОбъекта);
		ОписаниеОбъекта.Вставить("Объект", ОбъектМетаданных.Имя);
		
		Если ТипОбъекта = "ОбщийМодуль" Тогда
			
			СерверныйМодуль = (ОбъектМетаданных.Сервер Или ОбъектМетаданных.ВнешнееСоединение);
			ОписаниеОбъекта.Вставить("ТипМодуля", ?(СерверныйМодуль, "Сервер", "Клиент"));
			
		ИначеЕсли ОбъектМетаданныхИмеетФормы(ГруппаОбъектов) Тогда
			
			ФормыОбъекта = Новый Массив;
			
			Для каждого ФормаОбъекта Из ОбъектМетаданных.Формы Цикл
				ФормыОбъекта.Добавить(ФормаОбъекта.Имя);
			КонецЦикла;
			
			ОписаниеОбъекта.Вставить("Формы", ФормыОбъекта);
			
		КонецЕсли; 
		
		СписокМетаданных.Добавить(ОписаниеОбъекта);
		
	КонецЦикла;
	
	Возврат СписокМетаданных;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТестыМодуля(Модуль)
	
	Попытка
		ТестыМодуля = Новый Массив;
		Модуль.тест_ДобавитьТестыВСписок(ТестыМодуля);
		Возврат ТестыМодуля;
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при получении тестов модуля %1.'"), Модуль) + " " +
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Новый Массив;
	КонецПопытки;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьТестыОбъектаВТаблицу(
			ТаблицаТестов,
			ГруппаОбъектов,
			ТипОбъекта,
			Объект,
			ТипМодуля,
			СписокТестов,
			УникальныйИдентификатор)
	
	Если СписокТестов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ОписаниеТеста Из СписокТестов Цикл
		
		СтрокаТаблицы = ТаблицаТестов.Добавить();
		СтрокаТаблицы.ТипОбъекта = ТипОбъекта;
		СтрокаТаблицы.Объект = Объект;
		СтрокаТаблицы.ТипМодуля = ТипМодуля;
		СтрокаТаблицы.ИмяТеста = ОписаниеТеста.ИмяТеста;
		
		Если ЗначениеЗаполнено(ОписаниеТеста.Параметры) Тогда
			СтрокаТаблицы.АдресПараметровТеста = ПоместитьПараметрыТестаВоВременноеХранилище(
				ОписаниеТеста.Параметры, УникальныйИдентификатор);
		КонецЕсли; 
		
		СтрокаТаблицы.Уточнение = ОписаниеТеста.Уточнение;
		СтрокаТаблицы.Идентификатор = Новый УникальныйИдентификатор;
		СтрокаТаблицы.ГруппаОбъектов = ГруппаОбъектов;
		СтрокаТаблицы.ПолноеИмяТеста = ПолноеИмяТеста(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПоместитьПараметрыТестаВоВременноеХранилище(ПараметрыТеста, УникальныйИдентификатор)
	
	Хранилище = Новый ХранилищеЗначения(ПараметрыТеста);
	Возврат ПоместитьВоВременноеХранилище(Хранилище, УникальныйИдентификатор);
	
КонецФункции

#Область ЗаполнениеСерверныхТестов

&НаСервере
Процедура ДобавитьСерверныеТестыВТаблицу(ОбъектыМетаданныхСТестами)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ОписаниеОбъекта Из ОбъектыМетаданныхСТестами Цикл
		
		ГруппаОбъектов = ОписаниеОбъекта.ГруппаОбъектов;
		
		Если ГруппаОбъектов = "ОбщиеМодули" Тогда
			
			Если ОписаниеОбъекта.ТипМодуля = "Сервер" Тогда
				ДобавитьТестыСерверногоОбщегоМодуля(ОписаниеОбъекта.Объект);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "Константы" Тогда
			
			ДобавитьСерверныеТестыКонстанты(ОписаниеОбъекта.Объект);
			
		ИначеЕсли ГруппаОбъектов = "Перечисления" Тогда
			
			ДобавитьСерверныеТестыПеречисления(ОписаниеОбъекта.Объект);
			
		ИначеЕсли ГруппаОбъектов = "Объекты" Тогда
			
			ДобавитьСерверныеТестыОбъекта(ОписаниеОбъекта.ТипОбъекта, ОписаниеОбъекта.Объект);
			
		ИначеЕсли ГруппаОбъектов = "Регистры" Тогда
			
			ДобавитьСерверныеТестыРегистра(ОписаниеОбъекта.ТипОбъекта, ОписаниеОбъекта.Объект);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьТестыСерверногоОбщегоМодуля(ИмяМодуля)
	
	ОбщийМодуль = мт_ТестированиеСлужебный.ОбщийМодуль(ИмяМодуля);
	СписокТестов = ПолучитьТестыМодуля(ОбщийМодуль);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"ОбщиеМодули",
		"ОбщийМодуль",
		ИмяМодуля,
		"Сервер",
		СписокТестов,
		УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСерверныеТестыКонстанты(ИмяКонстанты)
	
	МодульМенеджера = мт_ТестированиеСлужебный.МодульМенеджераОбъекта("Константа", ИмяКонстанты);
	ТестыМодуляМенеджера = ПолучитьТестыМодуля(МодульМенеджера);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Константы",
		"Константа",
		ИмяКонстанты,
		"МодульМенеджера",
		ТестыМодуляМенеджера,
		УникальныйИдентификатор);
	
	МодульМенеджераЗначения = мт_ТестированиеСлужебный.МодульМенеджераЗначенияКонстанты(ИмяКонстанты);
	ТестыМодуляМенеджераЗначения = ПолучитьТестыМодуля(МодульМенеджераЗначения);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Константы",
		"Константа",
		ИмяКонстанты,
		"МодульМенеджераЗначения",
		ТестыМодуляМенеджераЗначения,
		УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСерверныеТестыПеречисления(ИмяПеречисления)
	
	МодульМенеджера = мт_ТестированиеСлужебный.МодульМенеджераОбъекта("Перечисление", ИмяПеречисления);
	СписокТестов = ПолучитьТестыМодуля(МодульМенеджера);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Перечисления",
		"Перечисление",
		ИмяПеречисления,
		"МодульМенеджера",
		СписокТестов,
		УникальныйИдентификатор);
	
КонецПроцедуры 
	
&НаСервере
Процедура ДобавитьСерверныеТестыОбъекта(ТипОбъекта, Объект)
	
	МодульОбъекта = мт_ТестированиеСлужебный.МодульОбъекта(ТипОбъекта, Объект);
	ТестыМодуляОбъекта = ПолучитьТестыМодуля(МодульОбъекта);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Объекты",
		ТипОбъекта,
		Объект,
		"МодульОбъекта",
		ТестыМодуляОбъекта,
		УникальныйИдентификатор);
	
	МодульМенеджера = мт_ТестированиеСлужебный.МодульМенеджераОбъекта(ТипОбъекта, Объект);
	ТестыМодуляМенеджера = ПолучитьТестыМодуля(МодульМенеджера);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Объекты",
		ТипОбъекта,
		Объект,
		"МодульМенеджера",
		ТестыМодуляМенеджера,
		УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСерверныеТестыРегистра(ВидРегистра, Регистр)
	
	МодульНабораЗаписей = мт_ТестированиеСлужебный.МодульНабораЗаписей(ВидРегистра, Регистр);
	ТестыМодуляНабораЗаписей = ПолучитьТестыМодуля(МодульНабораЗаписей);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Регистры",
		ВидРегистра,
		Регистр,
		"МодульНабораЗаписей",
		ТестыМодуляНабораЗаписей,
		УникальныйИдентификатор);
	
	МодульМенеджера = мт_ТестированиеСлужебный.МодульМенеджераОбъекта(ВидРегистра, Регистр);
	ТестыМодуляМенеджера = ПолучитьТестыМодуля(МодульМенеджера);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Регистры",
		ВидРегистра,
		Регистр,
		"МодульМенеджера",
		ТестыМодуляМенеджера,
		УникальныйИдентификатор);
	
КонецПроцедуры 

#КонецОбласти 

#Область ЗаполнениеКлиентскихТестов

&НаКлиенте
Процедура ДобавитьКлиентскиеТестыВТаблицу(ОбъектыМетаданныхСТестами)
	
	Для каждого ОписаниеОбъекта Из ОбъектыМетаданныхСТестами Цикл
		
		ГруппаОбъектов = ГруппаОбъектовМетаданных(ОписаниеОбъекта.ТипОбъекта);
		
		Если ГруппаОбъектов = "ОбщиеМодули" Тогда
			
			Если ОписаниеОбъекта.ТипМодуля = "Клиент" Тогда
				ДобавитьТестыКлиентскогоОбщегоМодуля(ОписаниеОбъекта.Объект);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "ОбщиеФормы" Тогда
			
			ДобавитьКлиентскиеТестыОбщейФормы(ОписаниеОбъекта.Объект);
			
		Иначе
	
			Для каждого ФормаОбъекта Из ОписаниеОбъекта.Формы Цикл
				ДобавитьКлиентскиеТестыФормыОбъекта(
					ОписаниеОбъекта.ТипОбъекта,
					ОписаниеОбъекта.Объект,
					ФормаОбъекта);
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТестыКлиентскогоОбщегоМодуля(ИмяМодуля)
	
	ОбщийМодуль = мт_ТестированиеСлужебныйКлиент.ОбщийМодуль(ИмяМодуля);
	СписокТестов = ПолучитьТестыМодуля(ОбщийМодуль);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"ОбщиеМодули",
		"ОбщийМодуль",
		ИмяМодуля,
		"Клиент",
		СписокТестов,
		УникальныйИдентификатор);
	
КонецПроцедуры 
	
&НаКлиенте
Процедура ДобавитьКлиентскиеТестыОбщейФормы(ИмяОбщейФормы)
	
	МодульФормы = мт_ТестированиеСлужебныйКлиент.МодульФормы("ОбщаяФорма", ИмяОбщейФормы);
	СписокТестов = ПолучитьТестыМодуля(МодульФормы);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"ОбщиеФормы",
		"ОбщаяФорма",
		ИмяОбщейФормы,
		"МодульФормы",
		СписокТестов,
		УникальныйИдентификатор);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьКлиентскиеТестыФормыОбъекта(ТипОбъекта, Объект, ИмяФормыОбъекта)
	
	МодульФормы = мт_ТестированиеСлужебныйКлиент.МодульФормы(ТипОбъекта, Объект, ИмяФормыОбъекта);
	СписокТестов = ПолучитьТестыМодуля(МодульФормы);
	
	ДобавитьТестыОбъектаВТаблицу(
		ТаблицаТестов,
		"Объекты",
		ТипОбъекта,
		Объект,
		ИмяФормыОбъекта,
		СписокТестов,
		УникальныйИдентификатор);
	
КонецПроцедуры 

#КонецОбласти 

#КонецОбласти 

#Область ВыполнениеТестов

// Запуск тестов выполняется по одному через обработчик ожидания в 0.1с между шагами для обновления сведений о текущем
// результате. Поэтому алгоритм перебора тестов получился сложноватым, но взамен имеется возможность наблюдать за
// состоянием тестирования во время выполнения.

&НаКлиенте
Процедура НачатьВыполнениеТестов(ТипТеста)
	Перем РезультатыТестов;
	
	ТестыДляВыполнения = ПолучитьТестыДляВыполнения(ТипТеста);
	КоличествоТестовДляВыполнения = ТестыДляВыполнения.Количество();
	ВыполненоТестов = 0;
	
	Если КоличествоТестовДляВыполнения = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	мт_ТестированиеВызовСервера.ИнициализироватьКонтекстТестирования();
	глТестируемоеПриложение = Неопределено;
	
	УстановитьСостояниеВыполненияТестов();
	
	УстановитьРезультатТестаОжидаетВГруппеТестов(
		ДеревоТестов.ПолучитьЭлементы(),
		ТестыДляВыполнения,
		Неопределено);
	
	СтекСтрокДереваВоВремяВыполнения.Очистить();
	ДобавитьСтрокуДереваВСтекВыполнения(-1);
	ДобавитьСтрокуДереваВСтекВыполнения(ДеревоТестов.ПолучитьЭлементы()[0]);
	
	ДатаПредыдущегоЗапуска = ТекущаяДата();
	
	ПодключитьОбработчикОжидания("ОбработатьСледующуюСтрокуДереваТестовПриВыполнении", 0.1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСледующуюСтрокуДереваТестовПриВыполнении()
	Перем РезультатВыполнения;
	
	СтрокаДерева = ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполнения);
	
	Если СтрокаДерева.ЭтоГруппа Тогда
		
		// Ориентироваться на картинку не самое удачное решение. Но при реализации было проще сделать так, предварительно
		// взвесив "за" и "против". Если функционал будет усложняться - необходимо переделать.
		Если СтрокаДерева.КартинкаРезультата = 1 Тогда
			СтрокаДерева.КартинкаРезультата = 5; // Если тест пройден, то картика успешного прошлого запуска.
		ИначеЕсли СтрокаДерева.КартинкаРезультата = 2 Тогда
			СтрокаДерева.КартинкаРезультата = 6; // Если тест не пройден, то картинка не успешного прошлого запуска.
		ИначеЕсли СтрокаДерева.КартинкаРезультата = 3 Тогда
			СтрокаДерева.КартинкаРезультата = 4; // Тест ожидает выполнения - установка картинки "Выполняется".
		КонецЕсли; 
		
		ДобавитьСтрокуДереваВСтекВыполнения(СтрокаДерева.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		ОбработатьСледующуюСтрокуДереваТестовПриВыполнении();
		
	ИначеЕсли СтрокаДерева.КартинкаРезультата = 3 Тогда
		// Тест ожидает выполнения - выполняем.
		
		СтрокаДерева.КартинкаРезультата = 4; // Картинка "Выполняется"
		ПодключитьОбработчикОжидания("ВыполнитьТестОбработчикОжидания", 0.1, Истина);
		
	Иначе
		
		СтрокаДерева.КартинкаРезультата = ?(СтрокаДерева.ТестПройден, 5, 6);
		
		РезультатВыполнения.Длительность = СтрокаДерева.Длительность;
		РезультатВыполнения.БылиОшибки = Не СтрокаДерева.ТестПройден;
		РезультатВыполнения.ЕстьПрошлые = Истина;
		
		ОбработатьПредыдущуюСтрокуДереваТестовПриВыполнении();
		
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьПредыдущуюСтрокуДереваТестовПриВыполнении()
	Перем РезультатВыполнения, РезультатВыполненияГруппы;
	
	СтрокаДерева = ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполнения);
	ВерхнийУровень = (СтрокаДерева = Неопределено);
	
	Если ВерхнийУровень Или СтрокаДерева.ЭтоГруппа Тогда
		
		СтрокиДерева = ?(ВерхнийУровень,
			ДеревоТестов.ПолучитьЭлементы(),
			СтрокаДерева.ПолучитьЭлементы());
		
		РезультатВыполнения.НомерТекущейСтроки = РезультатВыполнения.НомерТекущейСтроки + 1;
		ЗакончилисьСтроки = (РезультатВыполнения.НомерТекущейСтроки = СтрокиДерева.Количество());
		
		Если ЗакончилисьСтроки Тогда
			
			Если ВерхнийУровень Тогда
				ОбработкаОкончанияВыполненияТестов(РезультатВыполнения);
				Возврат;
			КонецЕсли; 
			
			УдалитьСтрокуДереваИзСтекаВыполнения();
			ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполненияГруппы);
			
			ГруппаТестовВыполнялась = СтрокаДерева.КартинкаРезультата = 4; // Картинка "Выполняется.
			
			Если ГруппаТестовВыполнялась Тогда
				
				ТестПройден = Не РезультатВыполнения.БылиОшибки;
				
				Если ТестПройден Тогда
					КартинкаРезультата = ?(РезультатВыполнения.ЕстьПрошлые, 5, 1);
				Иначе
					КартинкаРезультата = ?(РезультатВыполнения.ЕстьПрошлые, 6, 2);
				КонецЕсли; 
				
				СтрокаДерева.ТестПройден = ТестПройден;
				СтрокаДерева.КартинкаРезультата = КартинкаРезультата;
				СтрокаДерева.ДатаВыполнения = ТекущаяДата();
				СтрокаДерева.Длительность = РезультатВыполнения.Длительность;
				СтрокаДерева.ПредставлениеДлительности = ПредставлениеДлительности(СтрокаДерева.Длительность);
				
				РезультатВыполненияГруппы.Длительность = РезультатВыполненияГруппы.Длительность +
															РезультатВыполнения.Длительность;
				Если РезультатВыполнения.БылиОшибки Тогда
					РезультатВыполненияГруппы.БылиОшибки = Истина;
				КонецЕсли; 
				Если РезультатВыполнения.ЕстьПрошлые Тогда
					РезультатВыполненияГруппы.ЕстьПрошлые = Истина;
				КонецЕсли; 
				
			Иначе
				
				Если Не СтрокаДерева.ТестПройден Тогда
					РезультатВыполненияГруппы.БылиОшибки = Истина;
				КонецЕсли; 
			
				РезультатВыполненияГруппы.ЕстьПрошлые = Истина;
				
				СтрокаДерева.КартинкаРезультата = ?(СтрокаДерева.ТестПройден, 5, 6);
				
			КонецЕсли;
		
			ОбработатьПредыдущуюСтрокуДереваТестовПриВыполнении();
			
		Иначе
			
			СледующаяСтрока = СтрокиДерева[РезультатВыполнения.НомерТекущейСтроки];
			ДобавитьСтрокуДереваВСтекВыполнения(СледующаяСтрока.ПолучитьИдентификатор());
			ОбработатьСледующуюСтрокуДереваТестовПриВыполнении();
			
		КонецЕсли; 
		
	Иначе
		
		УдалитьСтрокуДереваИзСтекаВыполнения();
		ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполненияГруппы);
		
		РезультатВыполненияГруппы.Длительность = РезультатВыполненияГруппы.Длительность +
													РезультатВыполнения.Длительность;
		Если РезультатВыполнения.БылиОшибки Тогда
			РезультатВыполненияГруппы.БылиОшибки = Истина;
		КонецЕсли;
		Если РезультатВыполнения.ЕстьПрошлые Тогда
			РезультатВыполненияГруппы.ЕстьПрошлые = Истина;
		КонецЕсли; 
		
		ОбработатьПредыдущуюСтрокуДереваТестовПриВыполнении();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестОбработчикОжидания()
	Перем РезультатВыполнения;
	
	СтрокаДерева = ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполнения);
	
	СтрокаТеста = ТаблицаТестов.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДерева.Идентификатор))[0];
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТестПройден = ВыполнитьТест(СтрокаТеста);
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДатаВыполнения = ТекущаяДата();
	
	СтрокаТеста.ТестПройден = ТестПройден;
	СтрокаТеста.Длительность = ВремяОкончания - ВремяНачала;
	СтрокаТеста.ДатаВыполнения = ДатаВыполнения;
	
	СтрокаДерева.ТестПройден = СтрокаТеста.ТестПройден;
	СтрокаДерева.КартинкаРезультата = ?(СтрокаТеста.ТестПройден, 1, 2);
	СтрокаДерева.Длительность = СтрокаТеста.Длительность;
	СтрокаДерева.ДатаВыполнения = СтрокаТеста.ДатаВыполнения;
	СтрокаДерева.ПредставлениеДлительности = ПредставлениеДлительности(СтрокаДерева.Длительность);
	СтрокаДерева.СообщениеОбОшибке = СтрокаТеста.СообщениеОбОшибке;
	СтрокаДерева.ПодробнаяИнформацияОбОшибке = СтрокаТеста.ПодробнаяИнформацияОбОшибке;
	
	РезультатВыполнения.Длительность = СтрокаТеста.Длительность;
	РезультатВыполнения.БылиОшибки = Не СтрокаТеста.ТестПройден;
	
	ВыполненоТестов = ВыполненоТестов + 1;
	
	УстановитьСостояниеВыполненияТестов();
	
	ПодключитьОбработчикОжидания("ОбработатьПредыдущуюСтрокуДереваТестовПриВыполнении", 0.1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьСостояниеВыполненияТестов()
	
	ПроцентВыполнения = Цел(ВыполненоТестов / КоличествоТестовДляВыполнения * 100);
	Пояснение = СтрШаблон(НСтр("ru='Выполнено %1 из %2'"), ВыполненоТестов, КоличествоТестовДляВыполнения);
	
	Состояние(
		НСтр("ru='Выполнение тестов...'"),
		ПроцентВыполнения,
		Пояснение,
		БиблиотекаКартинок.мт_РазделМодульноеТестирование);
	
КонецПроцедуры 

&НаКлиенте
Функция ДобавитьСтрокуДереваВСтекВыполнения(ИдентификаторСтроки)
	
	СтрокаСтека = СтекСтрокДереваВоВремяВыполнения.Добавить();
	СтрокаСтека.ИдентификаторСтроки = ИдентификаторСтроки;
	СтрокаСтека.НомерТекущейСтроки = 0;
	
	Возврат СтрокаСтека;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуДереваИзСтекаВыполнения(РезультатВыполнения, УдалитьИзСтека = Ложь)
	
	РезультатВыполнения = СтекСтрокДереваВоВремяВыполнения[СтекСтрокДереваВоВремяВыполнения.Количество() - 1];
	СтрокаДерева = ?(РезультатВыполнения.ИдентификаторСтроки >= 0,
		ДеревоТестов.НайтиПоИдентификатору(РезультатВыполнения.ИдентификаторСтроки),
		Неопределено);
	
	Если УдалитьИзСтека Тогда
		СтекСтрокДереваВоВремяВыполнения.Удалить(СтрокаДерева);
	КонецЕсли; 
	
	Возврат СтрокаДерева;
	
КонецФункции 

&НаКлиенте
Процедура УдалитьСтрокуДереваИзСтекаВыполнения()
	
	СтекСтрокДереваВоВремяВыполнения.Удалить(СтекСтрокДереваВоВремяВыполнения.Количество() - 1);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОкончанияВыполненияТестов(РезультатВыполнения)
	
	мт_ТестированиеВызовСервера.УстановитьЗначениеКонтекстаТестирования("ВыполняетсяТестирование", Ложь);
	
	Если глТестируемоеПриложение <> Неопределено Тогда
		глТестируемоеПриложение.РазорватьСоединение();
		глТестируемоеПриложение = Неопределено;
	КонецЕсли; 
	
	Элементы.ДеревоТестовПредставлениеДлительности.ТекстПодвала =
		ПредставлениеДлительности(РезультатВыполнения.Длительность);
	
	Если глНастройкиТестирования.СохранятьРезультаты Тогда
		СохранитьРезультатыТестов(ДатаПредыдущегоЗапуска);
	КонецЕсли; 
	
	СформироватьОписаниеРезультата();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Выполнение тестов завершено.'"));
	
КонецПроцедуры 

&НаКлиенте
Функция ВыполнитьТест(СтрокаТеста)
	
	Попытка
		
		ГруппаОбъектов = ГруппаОбъектовМетаданных(СтрокаТеста.ТипОбъекта);
		ОписаниеТеста = СтрокаТаблицыТестовВСтруктуру(СтрокаТеста);
		
		Если ГруппаОбъектов = "ОбщиеМодули" Тогда
			
			Если СтрокаТеста.ТипМодуля = "Сервер" Тогда
				ВыполнитьСерверныйТестОбщегоМодуля(ОписаниеТеста);
			ИначеЕсли СтрокаТеста.ТипМодуля = "Клиент" Тогда
				ВыполнитьКлиентскийТестОбщегоМодуля(ОписаниеТеста)
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru='Неизвестный тип общего модуля %1'"), СтрокаТеста.ТипМодуля);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "ОбщиеФормы" Тогда
			ВыполнитьКлиентскийТестОбщейФормы(ОписаниеТеста);
			
		ИначеЕсли ГруппаОбъектов = "Константы" Тогда
			
			Если СтрокаТеста.ТипМодуля = "МодульМенеджера"
					Или СтрокаТеста.ТипМодуля = "МодульМенеджераЗначения"
			Тогда
				ВыполнитьСерверныйТестКонстанты(ОписаниеТеста);
			Иначе
				ВыполнитьКлиентскийТестФормыОбъекта(ОписаниеТеста);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "Перечисления" Тогда
			
			Если СтрокаТеста.ТипМодуля = "МодульМенеджера" Тогда
				ВыполнитьСерверныйТестПеречисления(ОписаниеТеста);
			Иначе
				ВыполнитьКлиентскийТестФормыОбъекта(ОписаниеТеста);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "Объекты" Тогда
			
			Если СтрокаТеста.ТипМодуля = "МодульОбъекта"
					Или СтрокаТеста.ТипМодуля = "МодульМенеджера" Тогда
				ВыполнитьСерверныйТестОбъекта(ОписаниеТеста);
			Иначе
				ВыполнитьКлиентскийТестФормыОбъекта(ОписаниеТеста);
			КонецЕсли; 
			
		ИначеЕсли ГруппаОбъектов = "Регистры" Тогда
			
			Если СтрокаТеста.ТипМодуля = "МодульНабораЗаписей"
					Или СтрокаТеста.ТипМодуля = "МодульМенеджера"
			Тогда
				ВыполнитьСерверныйТестРегистра(ОписаниеТеста);
			Иначе
				ВыполнитьКлиентскийТестФормыОбъекта(ОписаниеТеста);
			КонецЕсли; 
			
		Иначе
			
			ВызватьИсключение НСтр("ru='Объект не поддерживает выполнение тестирования'");
			
		КонецЕсли; 
		
		СтрокаТеста.СообщениеОбОшибке = "";
		СтрокаТеста.ПодробнаяИнформацияОбОшибке = "";
		
		Возврат Истина;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		СтрокаТеста.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		СтрокаТеста.ПодробнаяИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Возврат Ложь;
		
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
Процедура УстановитьРезультатТестаОжидаетВГруппеТестов(СтрокиДерева, ТестыДляВыполнения, ЕстьТестыДляВыполнения)
	
	ЕстьТестыДляВыполнения = Ложь;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЕстьТестыДляВыполненияВГруппе = Ложь;
			
			УстановитьРезультатТестаОжидаетВГруппеТестов(
				СтрокаДерева.ПолучитьЭлементы(),
				ТестыДляВыполнения,
				ЕстьТестыДляВыполненияВГруппе);
			
			Если ЕстьТестыДляВыполненияВГруппе Тогда
				ЕстьТестыДляВыполнения = Истина;
				УстановитьРезультатТестаОжидает(СтрокаДерева);
			КонецЕсли; 
		
		ИначеЕсли ТестыДляВыполнения.Найти(СтрокаДерева.Идентификатор) <> Неопределено Тогда
			
			ЕстьТестыДляВыполнения = Истина;
			УстановитьРезультатТестаОжидает(СтрокаДерева);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьРезультатТестаОжидает(СтрокаТеста)
	
	СтрокаТеста.ДатаВыполнения = Неопределено;
	СтрокаТеста.Длительность = 0;
	СтрокаТеста.ТестПройден = Ложь;
	СтрокаТеста.СообщениеОбОшибке = "";
	СтрокаТеста.ПредставлениеДлительности = "";
	СтрокаТеста.КартинкаРезультата = 3;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьТестыДляВыполнения(ТипТеста)
	
	ТестыДляВыполнения = Новый Массив;
	ВыделенныеТесты = ВыделенныеТесты();
	
	Для каждого СтрокаТеста Из ТаблицаТестов Цикл
		
		Если ТестПодходитДляВыполнения(СтрокаТеста, ВыделенныеТесты, ТипТеста) Тогда
			ТестыДляВыполнения.Добавить(СтрокаТеста.Идентификатор);
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТестыДляВыполнения;
	
КонецФункции 

&НаКлиенте
Функция ТестПодходитДляВыполнения(СтрокаТеста, ВыделенныеТесты, ТипТеста)
	
	Если ТипТеста = "ВыполнитьВсеТесты" Тогда
		Возврат Истина;
	ИначеЕсли ТипТеста = "ВыполнитьТест" Тогда
		Возврат ВыделенныеТесты.Найти(СтрокаТеста.Идентификатор) <> Неопределено;
	ИначеЕсли ТипТеста = "ПовторитьТесты" Тогда
		Возврат СтрокаТеста.ДатаВыполнения >= ДатаПредыдущегоЗапуска;
	ИначеЕсли ТипТеста = "ВыполнитьНепройденныеТесты" Тогда
		Возврат ЗначениеЗаполнено(СтрокаТеста.ДатаВыполнения) И Не СтрокаТеста.ТестПройден;
	ИначеЕсли ТипТеста = "ВыполнитьНевыполненныеТесты" Тогда
		Возврат Не ЗначениеЗаполнено(СтрокаТеста.ДатаВыполнения);
	ИначеЕсли ТипТеста = "ВыполнитьПройденныеТесты" Тогда
		Возврат ЗначениеЗаполнено(СтрокаТеста.ДатаВыполнения) И СтрокаТеста.ТестПройден;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ЗапуститьТестНаСервере(ТестируемыйМодуль, ИмяТеста, АдресПараметровТеста)
	
	ПараметрыТеста = ?(ЗначениеЗаполнено(АдресПараметровТеста),
						ПолучитьПараметрыТестаИзХранилища(АдресПараметровТеста),
						Неопределено);
	ЕстьПараметрыТеста = (ПараметрыТеста <> Неопределено);
	
	Выполнить(СформироватьСтрокуВызоваТеста(ИмяТеста, ЕстьПараметрыТеста));
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗапуститьТестНаКлиенте(ТестируемыйМодуль, ИмяТеста, АдресПараметровТеста)
	
	ПараметрыТеста = ?(ЗначениеЗаполнено(АдресПараметровТеста),
						ПолучитьПараметрыТестаИзХранилища(АдресПараметровТеста),
						Неопределено);
	ЕстьПараметрыТеста = (ПараметрыТеста <> Неопределено);
	
	Выполнить(СформироватьСтрокуВызоваТеста(ИмяТеста, ЕстьПараметрыТеста));
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтрокуВызоваТеста(ИмяТеста, ЕстьПараметрыТеста)
	
	Результат = "ТестируемыйМодуль." + ИмяТеста + "(";
	Если ЕстьПараметрыТеста Тогда
		Результат = Результат + "ПараметрыТеста";
	КонецЕсли; 
	Результат = Результат + ");";
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьПараметрыТестаИзХранилища(АдресХранилища)
	
	ХранилищеПараметров = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат ?(ТипЗнч(ХранилищеПараметров) = Тип("ХранилищеЗначения"),
				ХранилищеПараметров.Получить(),
				Неопределено);
	
КонецФункции 

#Область ВыполнениеСерверныхТестов

&НаСервереБезКонтекста
Процедура ВыполнитьСерверныйТестОбщегоМодуля(ОписаниеТеста)
	
	ТестируемыйМодуль = мт_ТестированиеСлужебный.ОбщийМодуль(ОписаниеТеста.Объект);
	
	ЗапуститьТестНаСервере(
		ТестируемыйМодуль,
		ОписаниеТеста.ИмяТеста,
		ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ВыполнитьСерверныйТестКонстанты(ОписаниеТеста)
	
	Если ОписаниеТеста.ТипМодуля = "МодульМенеджера" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульМенеджераОбъекта("Константа", ОписаниеТеста.Объект);
	ИначеЕсли ОписаниеТеста.ТипМодуля = "МодульМенеджераЗначения" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульМенеджераЗначенияКонстанты(ОписаниеТеста.Объект);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип модуля констант %1'"), ОписаниеТеста.ТипМодуля);
	КонецЕсли; 
	
	ЗапуститьТестНаСервере(ТестируемыйМодуль, ОписаниеТеста.ИмяТеста, ОписаниеТеста.АдресПараметровТеста);
				
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ВыполнитьСерверныйТестПеречисления(ОписаниеТеста)
	
	ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульМенеджераОбъекта(
		ОписаниеТеста.ТипОбъекта,
		ОписаниеТеста.Объект);
		
	ЗапуститьТестНаСервере(
		ТестируемыйМодуль,
		ОписаниеТеста.ИмяТеста,
		ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьСерверныйТестОбъекта(ОписаниеТеста)
	
	Если ОписаниеТеста.ТипМодуля = "МодульОбъекта" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульОбъекта(ОписаниеТеста.ТипОбъекта, ОписаниеТеста.Объект);
	ИначеЕсли ОписаниеТеста.ТипМодуля = "МодульМенеджера" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульМенеджераОбъекта(ОписаниеТеста.ТипОбъекта, ОписаниеТеста.Объект);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип модуля %1'"), ОписаниеТеста.ТипМодуля);
	КонецЕсли; 
	
	ЗапуститьТестНаСервере(ТестируемыйМодуль, ОписаниеТеста.ИмяТеста, ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ВыполнитьСерверныйТестРегистра(ОписаниеТеста)
	
	Если ОписаниеТеста.ТипМодуля = "МодульНабораЗаписей" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульНабораЗаписей(ОписаниеТеста.ТипОбъекта, ОписаниеТеста.Объект);
	ИначеЕсли ОписаниеТеста.ТипМодуля = "МодульМенеджера" Тогда
		ТестируемыйМодуль = мт_ТестированиеСлужебный.МодульМенеджераОбъекта(ОписаниеТеста.ТипОбъекта, ОписаниеТеста.Объект);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип модуля %1'"), ОписаниеТеста.ТипМодуля);
	КонецЕсли; 
	
	ЗапуститьТестНаСервере(ТестируемыйМодуль, ОписаниеТеста.ИмяТеста, ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры 

#КонецОбласти 

#Область ВыполнениеКлиентскихТестов

&НаКлиенте
Процедура ВыполнитьКлиентскийТестОбщегоМодуля(ОписаниеТеста)
	
	ТестируемыйМодуль = мт_ТестированиеСлужебныйКлиент.ОбщийМодуль(ОписаниеТеста.Объект);
	
	ЗапуститьТестНаКлиенте(
		ТестируемыйМодуль,
		ОписаниеТеста.ИмяТеста,
		ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьКлиентскийТестОбщейФормы(ОписаниеТеста)
	
	ТестируемыйМодуль = мт_ТестированиеСлужебныйКлиент.МодульФормы("ОбщаяФорма", ОписаниеТеста.Объект);
	
	ЗапуститьТестНаКлиенте(
		ТестируемыйМодуль,
		ОписаниеТеста.ИмяТеста,
		ОписаниеТеста.АдресПараметровТеста);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьКлиентскийТестФормыОбъекта(ОписаниеТеста)
	
	ТестируемыйМодуль = мт_ТестированиеСлужебныйКлиент.МодульФормы(
		ОписаниеТеста.ТипОбъекта,
		ОписаниеТеста.Объект,
		ОписаниеТеста.ТипМодуля);
	
	ЗапуститьТестНаКлиенте(
		ТестируемыйМодуль,
		ОписаниеТеста.ИмяТеста,
		ОписаниеТеста.АдресПараметровТеста);
		
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ГруппаОбъектовМетаданных(ТипОбъектов)
	
	Если ТипОбъектов = "ОбщийМодуль" Тогда
		Возврат "ОбщиеМодули";
	ИначеЕсли ТипОбъектов = "ОбщаяФорма" Тогда
		Возврат "ОбщиеФормы";
	ИначеЕсли ТипОбъектов = "Константа" Тогда
		Возврат "Константы";
	ИначеЕсли ТипОбъектов = "Перечисление" Тогда
		Возврат "Перечисления";
	ИначеЕсли ТипОбъектов = "ПланОбмена"
				Или ТипОбъектов = "Справочник"
				Или ТипОбъектов = "Документ"
				Или ТипОбъектов = "ЖурналДокументов"
				Или ТипОбъектов = "Отчет"
				Или ТипОбъектов = "Обработка"
				Или ТипОбъектов = "ПланВидовХарактеристик"
				Или ТипОбъектов = "ПланСчетов"
				Или ТипОбъектов = "ПланВидовРасчета"
				Или ТипОбъектов = "БизнесПроцесс"
				Или ТипОбъектов = "Задача"
	Тогда
		Возврат "Объекты";
	ИначеЕсли ТипОбъектов = "РегистрСведений"
				Или ТипОбъектов = "РегистрНакопления"
				Или ТипОбъектов = "РегистрБухгалтерии"
				Или ТипОбъектов = "РегистрРасчета"
	Тогда
		Возврат "Регистры";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип объектов %1'"), ТипОбъектов);
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ОбъектМетаданныхИмеетФормы(ГруппаОбъектов)
	
	Возврат ГруппаОбъектов = "Перечисления" Или ГруппаОбъектов = "Объекты" Или ГруппаОбъектов = "Регистры";
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаОбъектаМетаданных(ТипОбъекта, ТипыОбъектовМетаданных)
	
	НайденныеСтроки = ТипыОбъектовМетаданных.НайтиСтроки(Новый Структура("ТипОбъектов", ТипОбъекта));
	Возврат НайденныеСтроки[0];
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДлительности(Длительность)
	
	ДлительностьСекунда = 1000;
	ДлительностьМинута  = 60000;
	ДлительностьЧас     = 3600000;
	
	Если Длительность = 0 Тогда
		
		Возврат "";
		
	ИначеЕсли Длительность < ДлительностьСекунда Тогда
		
		Возврат Строка(Длительность) + " " + НСтр("ru='мс'");
		
	ИначеЕсли Длительность < ДлительностьМинута Тогда
	
		Возврат Формат(Длительность / 1000, "ЧДЦ=1") + " " + НСтр("ru='с'");
		
	Иначе
		
		Остаток = Длительность;
		Часов = Цел(Остаток / ДлительностьЧас);
		
		Остаток = Остаток % ДлительностьЧас;
		Минут = Цел(Остаток / ДлительностьМинута);
		
		Остаток = Остаток % ДлительностьМинута;
		Секунд = Цел(Остаток / ДлительностьСекунда);
		
		Результат = "";
		
		Если Часов > 0 Тогда
			Результат = Результат + Часов + " " + НСтр("ru='ч'") + " ";
		КонецЕсли; 
		
		Результат = Результат + Минут + " " + НСтр("ru='м'") + " " +
						Секунд + " " + НСтр("ru='с'");
		
		Возврат Результат;
		
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиМодуля(ТипМодуля)
	
	ЭтоМодульФормы = (ТипМодуля <> "МодульОбъекта"
						И ТипМодуля <> "МодульНабораЗаписей"
						И ТипМодуля <> "МодульМенеджера"
						И ТипМодуля <> "МодульМенеджераЗначения");
	Возврат ?(ЭтоМодульФормы, 2, 0);
	
КонецФункции 

&НаКлиенте
Функция ВыделенныеТесты()
	
	ВыделенныеТесты = Новый Массив;
	
	ВыделеннаяСтрока = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ВыделеннаяСтрока <> Неопределено Тогда
		
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			ПоместитьТестыГруппыВМассив(ВыделеннаяСтрока, ВыделенныеТесты);
		Иначе
			ВыделенныеТесты.Добавить(ВыделеннаяСтрока.Идентификатор);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ВыделенныеТесты;
	
КонецФункции 

&НаКлиенте
Процедура ПоместитьТестыГруппыВМассив(СтрокаГруппы, МассивТестов)
	
	Для каждого СтрокаДерева Из СтрокаГруппы.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			ПоместитьТестыГруппыВМассив(СтрокаДерева, МассивТестов);
		Иначе
			МассивТестов.Добавить(СтрокаДерева.Идентификатор);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаТаблицыТестовВСтруктуру(СтрокаДерева)
	
	ОписаниеТеста = Новый Структура(
		"АдресПараметровТеста,
		|ДатаВыполнения,
		|Длительность,
		|Идентификатор,
		|ИмяТеста,
		|Объект,
		|ПодробнаяИнформацияОбОшибке,
		|ПредставлениеГруппировки,
		|ПредставлениеДлительности,
		|СообщениеОбОшибке,
		|ТестПройден,
		|ТипМодуля,
		|ТипОбъекта,
		|Уточнение");
	ЗаполнитьЗначенияСвойств(ОписаниеТеста, СтрокаДерева);
	
	Возврат ОписаниеТеста;
	
КонецФункции 

&НаКлиенте
Процедура СформироватьОписаниеРезультата()
	
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОписаниеРезультата.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		СформироватьОписаниеРезультатаГруппыТестов(ТекущиеДанные);
	Иначе
		ОписаниеТеста = СтрокаТаблицыТестовВСтруктуру(ТекущиеДанные);
		СформироватьОписаниеРезультатаТеста(ОписаниеТеста, ОписаниеРезультата, УникальныйИдентификатор);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьОписаниеРезультатаГруппыТестов(СтрокаДерева)
	
	ИмяГруппы = СтрокаДерева.ПредставлениеГруппировки;
	Поз = СтрНайти(ИмяГруппы, "(", НаправлениеПоиска.СКонца);
	Если Поз > 0 Тогда
		ИмяГруппы = СокрП(Лев(ИмяГруппы, Поз - 1));
	КонецЕсли; 
	
	СводкаПоГруппе = Новый Структура;
	СводкаПоГруппе.Вставить("ИмяГруппы", ИмяГруппы);
	СводкаПоГруппе.Вставить("НеВыполнено", 0);
	СводкаПоГруппе.Вставить("Пройдено", 0);
	СводкаПоГруппе.Вставить("НеПройдено", 0);
	СводкаПоГруппе.Вставить("Длительность", 0);
	
	ЗаполнитьСводкуПоГруппеТестов(СтрокаДерева.ПолучитьЭлементы(), СводкаПоГруппе);
	
	СформироватьОписаниеРезультатаГруппыТестовНаСервере(СводкаПоГруппе, ОписаниеРезультата, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьОписаниеРезультатаГруппыТестовНаСервере(
			СводкаПоГруппе,
			ОписаниеРезультата,
			УникальныйИдентификатор)
	
	ЖирныйШрифт = Новый Шрифт("Arial", 10, Истина);
	КрупныйШрифт = Новый Шрифт("Arial", 12);
	ШрифтЗаголовка = Новый Шрифт("Arial", 14, Истина);
	
	ОписаниеРезультата = Новый ФорматированныйДокумент;
	
	Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
	Параграф.МеждустрочныйИнтервал = 1.5;
	
	ЗаголовокОписания = Параграф.Элементы.Добавить(
		НСтр("ru='Сводка по группе'"),
		Тип("ТекстФорматированногоДокумента"));
	ЗаголовокОписания.Шрифт = ШрифтЗаголовка;
	
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	ИмяГруппы = Параграф.Элементы.Добавить(СводкаПоГруппе.ИмяГруппы, Тип("ТекстФорматированногоДокумента"));
	ИмяГруппы.Шрифт = КрупныйШрифт;
		
	Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
	Параграф.МеждустрочныйИнтервал = 1.5;
	Параграф.Отступ = 10;
	
	КоличествоТестовВсего = СводкаПоГруппе.НеВыполнено + СводкаПоГруппе.Пройдено + СводкаПоГруппе.НеПройдено;
	
	Параграф.Элементы.Добавить(
		НСтр("ru='Тестов в группе:'") + " " + КоличествоТестовВсего,
		Тип("ТекстФорматированногоДокумента"));
		
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	ПредставлениеДлительности = ?(КоличествоТестовВсего = СводкаПоГруппе.НеВыполнено,
		"-", ПредставлениеДлительности(СводкаПоГруппе.Длительность));
	
	Параграф.Элементы.Добавить(
		НСтр("ru='Общая длительность:'") + " " + ПредставлениеДлительности,
		Тип("ТекстФорматированногоДокумента"));
	
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
	Параграф.МеждустрочныйИнтервал = 1.5;
	
	ТекстРезультаты = Параграф.Элементы.Добавить(НСтр("ru='Результаты:'"), Тип("ТекстФорматированногоДокумента"));
	ТекстРезультаты.Шрифт = ЖирныйШрифт;
		
	Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
	Параграф.МеждустрочныйИнтервал = 1.5;
	Параграф.Отступ = 10;
	
	Параграф.Элементы.Добавить(
		ПоместитьВоВременноеХранилище(БиблиотекаКартинок.мт_РезультатТестаНеВыполнен, УникальныйИдентификатор),
		Тип("КартинкаФорматированногоДокумента"));
	Параграф.Элементы.Добавить(
		НСтр("ru=' Не запущено:'") + " " + СводкаПоГруппе.НеВыполнено,
		Тип("ТекстФорматированногоДокумента"));
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	Параграф.Элементы.Добавить(
		ПоместитьВоВременноеХранилище(БиблиотекаКартинок.мт_РезультатТестаПройден, УникальныйИдентификатор),
		Тип("КартинкаФорматированногоДокумента"));
	Параграф.Элементы.Добавить(
		НСтр("ru=' Пройдено:'") + " " + СводкаПоГруппе.Пройдено,
		Тип("ТекстФорматированногоДокумента"));
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	Параграф.Элементы.Добавить(
		ПоместитьВоВременноеХранилище(БиблиотекаКартинок.мт_РезультатТестаНеПройден, УникальныйИдентификатор),
		Тип("КартинкаФорматированногоДокумента"));
	Параграф.Элементы.Добавить(
		НСтр("ru=' Не пройдено:'") + " " + СводкаПоГруппе.НеПройдено,
		Тип("ТекстФорматированногоДокумента"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСводкуПоГруппеТестов(СтрокиДерева, СводкаПоГруппе)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьСводкуПоГруппеТестов(СтрокаДерева.ПолучитьЭлементы(), СводкаПоГруппе);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаДерева.ДатаВыполнения) Тогда
				СводкаПоГруппе.НеВыполнено = СводкаПоГруппе.НеВыполнено + 1;
			ИначеЕсли СтрокаДерева.ТестПройден Тогда
				СводкаПоГруппе.Пройдено = СводкаПоГруппе.Пройдено + 1;
			Иначе
				СводкаПоГруппе.НеПройдено = СводкаПоГруппе.НеПройдено + 1;
			КонецЕсли; 
			
			СводкаПоГруппе.Длительность = СводкаПоГруппе.Длительность + СтрокаДерева.Длительность;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СформироватьОписаниеРезультатаТеста(ОписаниеТеста, ОписаниеРезультата, УникальныйИдентификатор)
	
	ЖирныйШрифт = Новый Шрифт("Arial", 10, Истина);
	КрупныйШрифт = Новый Шрифт("Arial", 12);
	ШрифтЗаголовка = Новый Шрифт("Arial", 14, Истина);
	
	ОписаниеРезультата = Новый ФорматированныйДокумент;
	
	Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
	Параграф.МеждустрочныйИнтервал = 1.5;
	
	ЗаголовокОписания = Параграф.Элементы.Добавить(
		НСтр("ru='Сводка по тесту'"),
		Тип("ТекстФорматированногоДокумента"));
	ЗаголовокОписания.Шрифт = ШрифтЗаголовка;
	
	Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	Если Не ЗначениеЗаполнено(ОписаниеТеста.ДатаВыполнения) Тогда
		КартинкаСтатуса = БиблиотекаКартинок.мт_РезультатТестаНеВыполнен;
	ИначеЕсли ОписаниеТеста.ТестПройден Тогда
		КартинкаСтатуса = БиблиотекаКартинок.мт_РезультатТестаПройден;
	Иначе
		КартинкаСтатуса = БиблиотекаКартинок.мт_РезультатТестаНеПройден;
	КонецЕсли; 
	
	Параграф.Элементы.Добавить(
		ПоместитьВоВременноеХранилище(КартинкаСтатуса, УникальныйИдентификатор),
		Тип("КартинкаФорматированногоДокумента"));
	
	ПредставлениеТеста = ОписаниеТеста.ИмяТеста +
		?(ЗначениеЗаполнено(ОписаниеТеста.Уточнение),
			"(" + ОписаниеТеста.Уточнение + ")",
			""
		);
	ИмяТеста = Параграф.Элементы.Добавить(" " + ПредставлениеТеста, Тип("ТекстФорматированногоДокумента"));
	ИмяТеста.Шрифт = КрупныйШрифт;
	
	Если ОписаниеТеста.Длительность > 0 Тогда
		Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		Параграф.Элементы.Добавить(
			НСтр("ru='Длительность: '")  + ОписаниеТеста.ПредставлениеДлительности,
			Тип("ТекстФорматированногоДокумента"));
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеТеста.СообщениеОбОшибке) Тогда
		
		Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
		Параграф.МеждустрочныйИнтервал = 1.5;
		
		Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
		СообщениеОбОшибке = Параграф.Элементы.Добавить(
			НСтр("ru='Сообщение:'"),
			Тип("ТекстФорматированногоДокумента"));
		СообщениеОбОшибке.Шрифт = ЖирныйШрифт;
		
		Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
		Параграф.МеждустрочныйИнтервал = 1.5;
		Параграф.Отступ = 10;
		Параграф.Элементы.Добавить(ОписаниеТеста.СообщениеОбОшибке, Тип("ТекстФорматированногоДокумента"));
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеТеста.ПодробнаяИнформацияОбОшибке) Тогда
		
		Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
		Параграф.МеждустрочныйИнтервал = 1.5;
		
		Параграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ПодробнаяИнформацияОбОшибке = Параграф.Элементы.Добавить(
			НСтр("ru='Подробная инфорация:'"),
			Тип("ТекстФорматированногоДокумента"));
		ПодробнаяИнформацияОбОшибке.Шрифт = ЖирныйШрифт;
		
		Параграф = ОписаниеРезультата.Элементы.Добавить(, Тип("ПараграфФорматированногоДокумента"));
		Параграф.МеждустрочныйИнтервал = 1.5;
		Параграф.Отступ = 10;
		Параграф.Элементы.Добавить(ОписаниеТеста.ПодробнаяИнформацияОбОшибке, Тип("ТекстФорматированногоДокумента"));
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатыТестов(ДатаПредыдущегоЗапуска)
	
	РезультатыТестов = Новый Массив;
	
	Для каждого СтрокаТеста Из ТаблицаТестов Цикл
		ДобавитьРезультатТестаВМассив(РезультатыТестов, СтрокаТеста);
	КонецЦикла;
	
	Результаты = Новый Структура;
	Результаты.Вставить("ДатаПредыдущегоЗапуска", ДатаПредыдущегоЗапуска);
	Результаты.Вставить("Результаты", РезультатыТестов);
	
	Попытка
		ИмяФайлаЖурнала = мт_ТестированиеСлужебныйКлиентПовтИсп.ПутьКФайлуРезультатовТестов(
			глНастройкиТестирования.КаталогЖурнала);
		мт_ТестированиеКлиентСервер.ЗаписатьДанныеВФайлJSON(ИмяФайлаЖурнала, Результаты);
	Исключение
		СообщениеЖурналаРегистрации = НСтр("ru='Произошла ошибка при записи результатов теста:'") + Символы.ПС +
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		мт_ТестированиеСлужебныйВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурналаРегистрации);
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьРезультатТестаВМассив(МассивРезультатов, СтрокаТеста)
	
	РезультатТеста = Новый Структура;
	РезультатТеста.Вставить("Тест", ПолноеИмяТеста(СтрокаТеста));
	РезультатТеста.Вставить("ДатаВыполнения", СтрокаТеста.ДатаВыполнения);
	РезультатТеста.Вставить("Длительность", СтрокаТеста.Длительность);
	РезультатТеста.Вставить("ТестПройден", СтрокаТеста.ТестПройден);
	РезультатТеста.Вставить("СообщениеОбОшибке", СтрокаТеста.СообщениеОбОшибке);
	РезультатТеста.Вставить("ПодробнаяИнформацияОбОшибке", СтрокаТеста.ПодробнаяИнформацияОбОшибке);
	
	МассивРезультатов.Добавить(РезультатТеста);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолноеИмяТеста(СтрокаТеста)
	
	ПолноеИмяТеста = СтрокаТеста.ТипОбъекта + "." + СтрокаТеста.Объект + ".";
	Если СтрокаТеста.ТипОбъекта <> "ОбщийМодуль" Тогда
		ПолноеИмяТеста = ПолноеИмяТеста + СтрокаТеста.ТипМодуля + ".";
	КонецЕсли; 
	ПолноеИмяТеста = ПолноеИмяТеста + СтрокаТеста.ИмяТеста;
	Если ЗначениеЗаполнено(СтрокаТеста.Уточнение) Тогда
		ПолноеИмяТеста = ПолноеИмяТеста + "(" + СтрокаТеста.Уточнение + ")";
	КонецЕсли; 
	
	Возврат ПолноеИмяТеста;
	
КонецФункции 

&НаКлиенте
Процедура НачатьЗагрузкуПредыдущихРезультатовТестов(ОповещениеОЗавершении)
	
	Если Не глНастройкиТестирования.СохранятьРезультаты Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли; 
	
	ИмяФайлаЖурнала = мт_ТестированиеСлужебныйКлиентПовтИсп.ПутьКФайлуРезультатовТестов(
		глНастройкиТестирования.КаталогЖурнала);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФайлаЖурнала", ИмяФайлаЖурнала);
	ДопПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЖурналаЗавершение", ЭтотОбъект, ДопПараметры);
	
	Файл = Новый Файл(ИмяФайлаЖурнала);
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЖурналаЗавершение(Существует, ДопПараметры) Экспорт
	
	Если Не Существует Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли; 
	
	Попытка
		ЗначенияСТипомДата = Новый Массив;
		ЗначенияСТипомДата.Добавить("ДатаПредыдущегоЗапуска");
		ЗначенияСТипомДата.Добавить("ДатаВыполнения");
		
		Результаты = мт_ТестированиеКлиентСервер.ПрочитатьДанныеИзФайлаJSON(
			ДопПараметры.ИмяФайлаЖурнала,
			ЗначенияСТипомДата);
		
		ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОЗавершении, Результаты);
	Исключение
		СообщениеЖурналаРегистрации = НСтр("ru='Произошла ошибка при загрузке прошлых результатов тестов:'") +
			Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		мт_ТестированиеСлужебныйВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурналаРегистрации);
		
		ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОЗавершении, Неопределено);
	КонецПопытки;
	
КонецПроцедуры 

#КонецОбласти 

#КонецОбласти 