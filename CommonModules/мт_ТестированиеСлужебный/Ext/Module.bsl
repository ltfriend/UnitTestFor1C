///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020 - 2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на общий модуль.
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		УстановитьБезопасныйРежим(Истина);
		Возврат Вычислить(Имя);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
КонецФункции

// Возвращает ссылка на модуль ссылочного объекта.
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта ("ПланОбмена", "Справочник", "Отчет" и т.п.).
//  ИмяОбъекта - Строка - имя объекта ("Номенклатура", "РеализацияТоваровУслуг", "Продажи" и т.п.).
// 
// Возвращаемое значение:
//  Модуль объекта.
//
Функция МодульОбъекта(ТипОбъекта, ИмяОбъекта) Экспорт
	
	Если ТипОбъекта = "ПланОбмена" Тогда
		Возврат ПланыОбмена[ИмяОбъекта].СоздатьУзел();
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		Возврат Справочники[ИмяОбъекта].СоздатьЭлемент();
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		Возврат Документы[ИмяОбъекта].СоздатьДокумент();
	ИначеЕсли ТипОбъекта = "Отчет" Тогда
		Возврат Отчеты[ИмяОбъекта].Создать();
	ИначеЕсли ТипОбъекта = "Обработка" Тогда
		Возврат Обработки[ИмяОбъекта].Создать();
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта].СоздатьЭлемент();
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда
		Возврат ПланыСчетов[ИмяОбъекта].СоздатьСчет();
	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта].СоздатьВидРасчета();
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		Возврат БизнесПроцессы[ИмяОбъекта].СоздатьБизнесПроцесс();
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		Возврат Задачи[ИмяОбъекта].СоздатьЗадачу();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип объекта %1'"), ТипОбъекта);
	КонецЕсли; 
	
КонецФункции 

// Возвращает ссылку на модуль менеджера объекта.
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта ("ПланОбмена", "Справочник", "Отчет" и т.п.).
//  ИмяОбъекта - Строка - имя объекта ("Номенклатура", "РеализацияТоваровУслуг", "Продажи" и т.п.).
// 
// Возвращаемое значение:
//  Модуль менеджера объекта.
//
Функция МодульМенеджераОбъекта(ТипОбъекта, ИмяОбъекта) Экспорт
	
	Если ТипОбъекта = "ПланОбмена" Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Константа" Тогда
		Возврат Константы[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "ЖурналДокументов" Тогда
		Возврат ЖурналыДокументов[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Перечисление" Тогда
		Возврат Перечисления[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Отчет" Тогда
		Возврат Отчеты[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Обработка" Тогда
		Возврат Обработки[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		Возврат РегистрыСведений[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "РегистрНакопления" Тогда
		Возврат РегистрыНакопления[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "РегистрБухгалтерии" Тогда
		Возврат РегистрыБухгалтерии[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "РегистрРасчета" Тогда
		Возврат РегистрыРасчета[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		Возврат Задачи[ИмяОбъекта];
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип объекта %1'"), ТипОбъекта);
	КонецЕсли; 
КонецФункции 

// Возвращает ссылку на модуль набора записей регистра.
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта ("РегистрСведений", "РегистрНакоплений" и т.п.).
//  ИмяОбъекта - Строка - имя объекта ("КурсыВалют", "СвободныеОстатки" и т.п.).
// 
// Возвращаемое значение:
//  Модуль набора записей.
//
Функция МодульНабораЗаписей(ТипОбъекта, ИмяОбъекта) Экспорт
	
	Если ТипОбъекта = "РегистрСведений" Тогда
		Возврат РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей();
	ИначеЕсли ТипОбъекта = "РегистрНакопления" Тогда
		Возврат РегистрыНакопления[ИмяОбъекта].СоздатьНаборЗаписей();
	ИначеЕсли ТипОбъекта = "РегистрБухгалтерии" Тогда
		Возврат РегистрыБухгалтерии[ИмяОбъекта].СоздатьНаборЗаписей();
	ИначеЕсли ТипОбъекта = "РегистрРасчета" Тогда
		Возврат РегистрыРасчета[ИмяОбъекта].СоздатьНаборЗаписей();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Неподдерживаемый тип объекта %1'"), ТипОбъекта);
	КонецЕсли; 
	
КонецФункции 

// Возвращает ссылку на модуль менеджера значения константы.
//
// Параметры:
//  ИмяКонстанты - Строка - имя константы.
// 
// Возвращаемое значение:
//  Модуль менеджера значения константы.
//
Функция МодульМенеджераЗначенияКонстанты(ИмяКонстанты) Экспорт
	
	Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
		Возврат Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Константа %1 отсутствует'"), ИмяКонстанты);
	КонецЕсли; 
	
КонецФункции 

// Сохраняет настройки тестирования.
//
// Параметры:
//  Настройки - Структура - настройки тестирования.
//
Процедура СохранитьНастройкиТестирования(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьРегистра = РегистрыСведений.мт_НастройкиТестирования.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(Настройки);
	ЗаписьРегистра.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры 

#КонецОбласти