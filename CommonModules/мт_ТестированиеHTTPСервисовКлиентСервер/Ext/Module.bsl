///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020 - 2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет вызов метода HTTP-сервиса и возвращает полученный ответ.
//
// Параметры:
//  ИмяМетода - Строка - имя вызываемого метода HTTP-сервиса. Указывается "<ИмяHttpСервиса>.<ИмяШаблонаUrl>". Например,
//                       для вызова метода по шаблону URL "Получить" HTTP-сервиса "ПередачаДанных" необходимо передать
//                       строку "ПередачаДанных.Получить".
//  ПараметрыВызова - Структура - параметры HTTP вызова. Если не указан, то будет вызван HTTP метод GET без каких-либо
//                                дополнительных параметров.
//    * HttpМетод - Строка - HTTP-метод. Если не указан, то по умолчанию используется метод GET.
//    * ТипКонтента - Строка - тип передаваемого контента, устанавливается как значение "Content-Type" заголовка HTTP
//                             запроса. Например, "application/json; charset=utf-8".
//    * Заголовки - Соответствие - содержит дополнительные заголовки HTTP запроса. Если дополнительных заголовков нет,
//                                 то свойство можно не указывать.
//    * ПараметрыURL - Соответствие - содержит части адреса, которые были параметризованы в шаблоне. Например, если
//                                    шаблон URL-адреса - "/{Doc}/ByNum/{Num}", то параметры URL должны содержать два
//                                    значение: "Doc" и "Num".
//    * ПараметрыЗапроса - Соответствие - содержит параметры запроса. Для HTTP метода GET параметры следуют после знака
//                             вопроса в URL адресе. Для остальных методов параметры помещаются в тело запроса. При
//                             этом устанавливается заголовок "Content-Type: application/x-www-form-urlencoded". Если
//                             у запроса нет параметров, то свойство не указывается.
//    * ПараметрыЗапросаВJSON - Булево - значение свойства ПараметрыЗапроса будут преобразовано в строку формата JSON.
//                                       При этом устанавливается заголовок "Content-Type: application/json; charset=utf-8".
//                                       При использовании HTTP метода GET данное свойство игнорируется.
//    * Тело - Строка, ДвоичныеДанные - тело HTTP запроса. Если тело пустое, то свойство не указывается. Для HTTP метода
//                                      GET данный параметр игнорируется.
//  ФорматОтвета - Строка - формат, в котором необходимо получить ответ. Может принимать следующие значения:
//    * Строка - получить ответ в виде строки. Если формат ответа не указан, то данное значение используется по
//               умолчанию.
//    * ДвоичныеДанные - получить ответ в виде двоичных данных.
//    * JSON - ответ будет прочитан как строка и преобразован из формата JSON в соответствие. Если ответ имеет неверный
//             формат, то будет вызвано Исключение.
// 
// Возвращаемое значение:
//  Структура - структура, содержащая ответ HTTP-сервиса:
//    * КодСостояния - Число - код состояния (ответа) HTTP-сервиса;
//    * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия;
//    * Тело - Строка, ДвоичныеДанные - ответ HTTP сервиса в формате, указанном во входящем параметре ФорматОтвета.
//
Функция ВызватьМетодHttpСервиса(ИмяМетода, ПараметрыВызова = Неопределено, ФорматОтвета = "Строка") Экспорт
	
	НастройкиТестирования = мт_ТестированиеСлужебныйВызовСервера.ПрочитатьНастройкиТестирования();
	
	Если Не ЗначениеЗаполнено(НастройкиТестирования) Тогда
		ВызватьИсключение НСтр("ru='Не указаны параметры подключения к ИБ для тестирования HTTP-сервисов. '") +
							НСтр("ru='Параметры задаются в разделе ""Настройки"" обозревателя тестов.'");
	КонецЕсли; 
	
	Если ПараметрыВызова = Неопределено Тогда
		ПараметрыВызова = ПараметрыHttpВызоваПоУмолчанию();
	КонецЕсли;
	
	Если Не ПараметрыВызова.Свойство("ПараметрыURL") Тогда
		ПараметрыВызова.Вставить("ПараметрыURL", Неопределено);
	КонецЕсли; 
	
	АдресUrl = UrlМетодаHttpСервисаПоШаблону(
				ИмяМетода,
				НастройкиТестирования.АдресПубликацииИБ,
				ПараметрыВызова.ПараметрыURL);
	СтруктураUrl = РазложитьАдресURL(АдресUrl);
	
	HttpЗапрос = СоздатьЗапросКРесурсуHttpСервиса(СтруктураUrl.АдресРесурса, ПараметрыВызова);
	
	ЗащищенноеСоединение = ?(СтруктураUrl.Протокол = "https",
		Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС),
		Неопределено);
	
	Соединение = Новый HTTPСоединение(
		СтруктураUrl.АдресСервера,
		СтруктураUrl.Порт,
		НастройкиТестирования.ИмяПользователяИБ,
		НастройкиТестирования.ПарольПользователяИБ,
		,
		,
		ЗащищенноеСоединение);
	
	HttpОтвет = Соединение.ВызватьHTTPМетод(ПараметрыВызова.HttpМетод, HttpЗапрос);
	ВыполненоУспешно = (HttpОтвет.КодСостояния >= 200 И HttpОтвет.КодСостояния < 400);
	
	Если ФорматОтвета = "ДвоичныеДанные" Тогда
		ТелоОтвета = HttpОтвет.ПолучитьТелоКакДвоичныеДанные();
	ИначеЕсли ФорматОтвета = "Строка" Или ФорматОтвета = "JSON" Тогда
		ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку();
		Если ФорматОтвета = "JSON" И ВыполненоУспешно Тогда
			ТелоОтвета = мт_ТестированиеКлиентСервер.СтрокаJsonВЗначение(ТелоОтвета);
		КонецЕсли; 
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Указан неверный ожидаемый формат ответа %1'"), ФорматОтвета);
	КонецЕсли; 
	
	Ответ = Новый Структура;
	Ответ.Вставить("КодСостояния", HttpОтвет.КодСостояния);
	Ответ.Вставить("Заголовки", HttpОтвет.Заголовки);
	Ответ.Вставить("Тело", ТелоОтвета);
	
	Возврат Ответ;
	
КонецФункции 

// Возвращает параметры вызова HTTP-сервиса по умолчанию
// Подробнее см. описание функции ВызватьМетодHttpСервиса.
//
Функция ПараметрыHttpВызоваПоУмолчанию() Экспорт
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("HttpМетод", "GET");
	ПараметрыВызова.Вставить("ТипКонтента", Неопределено);
	ПараметрыВызова.Вставить("Заголовки", Новый Соответствие);
	ПараметрыВызова.Вставить("ПараметрыURL", Неопределено);
	ПараметрыВызова.Вставить("ПараметрыЗапроса", Неопределено);
	ПараметрыВызова.Вставить("ПараметрыЗапросаВJSON", Ложь);
	ПараметрыВызова.Вставить("Тело", Неопределено);
	
	Возврат ПараметрыВызова;
	
КонецФункции 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Формирует полный URL для вызова метода HTTP-сервиса по его шаблону.
//
// Параметры:
//  ИмяМетода - Строка - полное имя шаблона URL. Указывается по правилу "<ИмяHttpСервиса>.<ИмяШаблонаUrl>". Например,
//                       для получения шаблона URL "Получить" HTTP-сервиса "ПередачаДанных" необходимо передать строку
//                       "ПередачаДанных.Получить".
//  АдресПубликацииИБ - Строка - адрес публикации информационной базы.
//  ПараметрыURL - Соответствие - содержит части адреса, которые были параметризованы в шаблоне. Например, если шаблон
//                                URL-адреса - "/{Doc}/ByNum/{Num}", то параметры URL должны содержать два значение:
//                                "Doc" и "Num".
// 
// Возвращаемое значение:
//  Строка - полный URL для вызова метода HTTP-сервиса по его шаблону.
//
Функция UrlМетодаHttpСервисаПоШаблону(ИмяМетода, Знач АдресПубликацииИБ, ПараметрыURL = Неопределено)
			
	ШаблонUrlМетода = мт_ТестированиеHTTPСервисовВызовСервера.ПолучитьШаблонUrlHttpСервиса(ИмяМетода);
	
	АдресРесурса = ШаблонUrlМетода;
	
	Если ПараметрыURL <> Неопределено Тогда
		
		Для каждого ЭлементПараметров Из ПараметрыURL Цикл
			АдресРесурса = СтрЗаменить(АдресРесурса,
							"{" + ЭлементПараметров.Ключ + "}",
							КодироватьСтрокуURL(XMLСтрока(ЭлементПараметров.Значение)));
		КонецЦикла;
		
	КонецЕсли; 
	
	АдресПубликацииИБ = СокрЛП(АдресПубликацииИБ);
	Если Прав(АдресПубликацииИБ, 1) <> "/" Тогда
		АдресПубликацииИБ = АдресПубликацииИБ + "/";
	КонецЕсли; 
	
	UrlМетода = АдресПубликацииИБ + "hs/" + АдресРесурса;
	Возврат UrlМетода;
	
КонецФункции 

// Создаёт и заполняет объект HTTPЗапрос для выполнения запроса к HTTP-сервису.
//
// Параметры:
//  АдресРесурса - Строка - строка HTTP-ресурса, к которому будет отправлен запрос.
//  ПараметрыВызова - Структура - параметры HTTP вызова. Подробнее см. описание функции ВызватьМетодHttpСервиса.
// 
// Возвращаемое значение:
//  HTTPЗапрос
//
Функция СоздатьЗапросКРесурсуHttpСервиса(АдресРесурса, ПараметрыВызова)
	
	Если Не ПараметрыВызова.Свойство("Заголовки") Тогда
		ПараметрыВызова.Вставить("Заголовки", Новый Соответствие);
	ИначеЕсли ТипЗнч(ПараметрыВызова.Заголовки) <> Тип("Соответствие") Тогда
		ПараметрыВызова.Заголовки = Новый Соответствие;
	КонецЕсли; 
	
	Если ПараметрыВызова.Свойство("ТипКонтента")
			И ЗначениеЗаполнено(ПараметрыВызова.ТипКонтента)
	Тогда
		ДобавитьТипКонтентаВЗаголовки(ПараметрыВызова.Заголовки, ПараметрыВызова.ТипКонтента);
	КонецЕсли; 
	
	Если Не ПараметрыВызова.Свойство("Тело") Тогда
		ПараметрыВызова.Вставить("Тело", Неопределено);
	КонецЕсли; 
	Если Не ПараметрыВызова.Свойство("HttpМетод") Тогда
		ПараметрыВызова.Вставить("HttpМетод", "GET");
	КонецЕсли; 
	
	HttpЗапрос = Новый HTTPЗапрос;
	HttpЗапрос.АдресРесурса = АдресРесурса;
	HttpЗапрос.Заголовки = ПараметрыВызова.Заголовки;
	
	Если ПараметрыВызова.HttpМетод = "GET" Тогда
		
		Если ПараметрыВызова.Свойство("ПараметрыЗапроса")
				И ПараметрыВызова.ПараметрыЗапроса <> Неопределено
		Тогда
			HttpЗапрос.АдресРесурса = HttpЗапрос.АдресРесурса + "?" +
				СоответствиеВСтрокуПараметровHTTPЗапроса(ПараметрыВызова.ПараметрыЗапроса);
		КонецЕсли;
	
	Иначе	
		
		Если ПараметрыВызова.Свойство("ПараметрыЗапроса") И ПараметрыВызова.ПараметрыЗапроса <> Неопределено Тогда
			
			Если ПараметрыВызова.ПараметрыЗапросаВJSON Тогда
				ДобавитьТипКонтентаВЗаголовки(HttpЗапрос.Заголовки, "application/json; charset=utf-8");
				ТелоЗапроса = мт_ТестированиеКлиентСервер.ЗначениеВСтрокуJson(ПараметрыВызова.ПараметрыЗапроса);
				HttpЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			Иначе
				ДобавитьТипКонтентаВЗаголовки(HttpЗапрос.Заголовки, "application/x-www-form-urlencoded");
				ТелоЗапроса = СоответствиеВСтрокуПараметровHTTPЗапроса(ПараметрыВызова.ПараметрыЗапроса);
				HttpЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПараметрыВызова.Свойство("Тело") И ПараметрыВызова.Тело <> Неопределено Тогда
			
			ТипТелаЗапроса = ТипЗнч(ПараметрыВызова.Тело);
			
			Если ТипТелаЗапроса = Тип("ДвоичныеДанные") Тогда
				HttpЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
			ИначеЕсли ТипТелаЗапроса = Тип("Строка") Тогда
				HttpЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			Иначе
				ВызватьИсключение НСтр("ru='Тело запроса можно установить только из строки или двоичных данных'");
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат HttpЗапрос;
	
КонецФункции 

Процедура ДобавитьТипКонтентаВЗаголовки(Заголовки, ТипКонтента)
	
	Заголовки.Вставить("Content-Type", ТипКонтента);
	
КонецПроцедуры

// Раскладывает адрес URL на составляющие и возвращает их в виде Структуры.
//
// Параметры:
//  АдресURL - Строка - URL адрес.
// 
// Возвращаемое значение:
//  Структура - структура, содержащая составляющие URL адреса:
//    * Протокол - Строка - протокол (http, https, ftp, mail-to и т.д.);
//    * АдресСервера - Строка - адрес сервера, например, "example.com";
//    * Порт - Число - порт сервера, если используется стандартный порт, то содержит значение Неопределено.
//    * АдресРесурса - Строка - адрес ресурса на веб-сервере, например, "/users".
//
Функция РазложитьАдресURL(Знач АдресURL)
	
	Результат = Новый Структура("Протокол, АдресСервера, Порт, АдресРесурса");
	
	Поз = СтрНайти(АдресURL, "://");
	Если Поз = 0 Тогда
		Результат.Протокол = "http";
	Иначе
		Результат.Протокол = НРег(Лев(АдресURL, Поз - 1));
		АдресURL = Сред(АдресURL, Поз + 3);
	КонецЕсли; 
	
	Поз = СтрНайти(АдресURL, "/");
	Если Поз = 0 Тогда
		АдресСервера = АдресURL;
	Иначе
		АдресСервера = Лев(АдресURL, Поз - 1);
		Результат.АдресРесурса = Сред(АдресURL, Поз + 1);
	КонецЕсли; 
	
	Поз = СтрНайти(АдресСервера, ":");
	Если Поз = 0 Тогда
		Результат.АдресСервера = АдресСервера;
	Иначе
		Результат.АдресСервера = Лев(АдресСервера, Поз - 1);
		Результат.Порт = Число(Сред(АдресСервера, Поз + 1));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции 

// Преобразует значения соответствия в строку для передачи в качестве параметров HTTP запроса.
//
// Параметры:
//  Соответствие - Соответствие.
// 
// Возвращаемое значение:
//  Строка - строка, сформированная в результате преобразования из соответствия.
//
Функция СоответствиеВСтрокуПараметровHTTPЗапроса(Соответствие)
	
	СтрокаПараметров = "";
	
	Для каждого Свойство Из Соответствие Цикл
		
		Если Свойство.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		
		Если СтрокаПараметров <> "" Тогда
			СтрокаПараметров = СтрокаПараметров + "&";
		КонецЕсли; 
		
		СтрокаПараметров = СтрокаПараметров +
			КодироватьСтрокуURL(XMLСтрока(Свойство.Ключ)) + "=" + 
			КодироватьСтрокуURL(XMLСтрока(Свойство.Значение));
		
	КонецЦикла;
		
	Возврат СтрокаПараметров; 
	
КонецФункции 

// Кодирует строку в URL (url encode). Используется вместо встроенной "КодироватьСтроку" для возможности вызова на
// клиенте.
//
// Параметры:
//  ИсходнаяСтрока - Строка - строка, которую необходимо кодировать в URL
// 
// Возвращаемое значение:
//  Строка - строка, кодированная в URL.
//
Функция КодироватьСтрокуURL(ИсходнаяСтрока)
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	СтрокаURL = "";
	
	Для Поз = 1 По ДлинаСтроки Цикл
		
		Симв = Сред(ИсходнаяСтрока, Поз, 1);
		КодСимвола = КодСимвола(Симв);
		
		Если ((Симв >= "a") И (Симв <= "z"))
				Или ((Симв >=" A") И (Симв <= "Z"))
				Или ((Симв >= "0" ) и ( Симв<="9"))
		Тогда
		
			СтрокаURL=СтрокаURL+Симв;
			
		Иначе
			
			Если (КодСимвола >= КодСимвола("А")) И (КодСимвола <= КодСимвола("п")) Тогда
				
				СтрокаURL = СтрокаURL +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(208) +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(144 + КодСимвола - КодСимвола("А"));
			
			ИначеЕсли (КодСимвола >= КодСимвола("р")) И (КодСимвола <= КодСимвола("я")) Тогда
				СтрокаURL = СтрокаURL +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(209) +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(128 + КодСимвола - КодСимвола("р"));
				
			ИначеЕсли (Симв="ё") Тогда
				
				СтрокаURL = СтрокаURL +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(209) +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(145);
				
			ИначеЕсли (Симв="Ё") Тогда
				
				СтрокаURL = СтрокаURL +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(208) +
					"%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(129);
				
			Иначе
				
				СтрокаURL = СтрокаURL + "%" + ПреобразоватьЧислоВШестнадцетиричнуюСистему(КодСимвола);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаURL;
	
КонецФункции 

// Преобразует число в строку с шестнадцетиричном представлении.
// Вспомогательная функция для функции "КодировитьСтрокуURL".
//
// Параметры:
//  Число - Число - число, преобразумое в шестнадцетиричное предсталение.
// 
// Возвращаемое значение:
//  Строка - шестандцетиричное представление числа.
//
Функция ПреобразоватьЧислоВШестнадцетиричнуюСистему(Знач Число)
	
	Числа16 = "0123456789ABCDEF";
	Результат = "";
	
	Пока Число > 0 цикл
		Остаток = Число % 16;
		Результат = Сред(Числа16, Остаток + 1, 1) + Результат;
		Число = Цел(Число / 16);
	КонецЦикла;
	
	Четное = (СтрДлина(Результат) % 2 = 0);
	Если Не Четное Тогда
		Результат = "0" + Результат;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 